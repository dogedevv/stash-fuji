// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class Approval extends ethereum.Event {
  get params(): Approval__Params {
    return new Approval__Params(this);
  }
}

export class Approval__Params {
  _event: Approval;

  constructor(event: Approval) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get spender(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get value(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class LogRebase extends ethereum.Event {
  get params(): LogRebase__Params {
    return new LogRebase__Params(this);
  }
}

export class LogRebase__Params {
  _event: LogRebase;

  constructor(event: LogRebase) {
    this._event = event;
  }

  get epoch(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get totalSupply(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class Transfer extends ethereum.Event {
  get params(): Transfer__Params {
    return new Transfer__Params(this);
  }
}

export class Transfer__Params {
  _event: Transfer;

  constructor(event: Transfer) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get value(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Stash extends ethereum.SmartContract {
  static bind(address: Address): Stash {
    return new Stash("Stash", address);
  }

  ADD_LIQUIDITY_PERIOD(): BigInt {
    let result = super.call(
      "ADD_LIQUIDITY_PERIOD",
      "ADD_LIQUIDITY_PERIOD():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_ADD_LIQUIDITY_PERIOD(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "ADD_LIQUIDITY_PERIOD",
      "ADD_LIQUIDITY_PERIOD():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  MAX_UINT256(): BigInt {
    let result = super.call("MAX_UINT256", "MAX_UINT256():(uint256)", []);

    return result[0].toBigInt();
  }

  try_MAX_UINT256(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("MAX_UINT256", "MAX_UINT256():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  RATE_DECIMALS(): i32 {
    let result = super.call("RATE_DECIMALS", "RATE_DECIMALS():(uint8)", []);

    return result[0].toI32();
  }

  try_RATE_DECIMALS(): ethereum.CallResult<i32> {
    let result = super.tryCall("RATE_DECIMALS", "RATE_DECIMALS():(uint8)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  REBASE_PERIOD(): BigInt {
    let result = super.call("REBASE_PERIOD", "REBASE_PERIOD():(uint256)", []);

    return result[0].toBigInt();
  }

  try_REBASE_PERIOD(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "REBASE_PERIOD",
      "REBASE_PERIOD():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  allowance(owner_: Address, spender: Address): BigInt {
    let result = super.call(
      "allowance",
      "allowance(address,address):(uint256)",
      [ethereum.Value.fromAddress(owner_), ethereum.Value.fromAddress(spender)]
    );

    return result[0].toBigInt();
  }

  try_allowance(
    owner_: Address,
    spender: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "allowance",
      "allowance(address,address):(uint256)",
      [ethereum.Value.fromAddress(owner_), ethereum.Value.fromAddress(spender)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  approve(spender: Address, value: BigInt): boolean {
    let result = super.call("approve", "approve(address,uint256):(bool)", [
      ethereum.Value.fromAddress(spender),
      ethereum.Value.fromUnsignedBigInt(value)
    ]);

    return result[0].toBoolean();
  }

  try_approve(spender: Address, value: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall("approve", "approve(address,uint256):(bool)", [
      ethereum.Value.fromAddress(spender),
      ethereum.Value.fromUnsignedBigInt(value)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  autoAddLiquidity(): boolean {
    let result = super.call(
      "autoAddLiquidity",
      "autoAddLiquidity():(bool)",
      []
    );

    return result[0].toBoolean();
  }

  try_autoAddLiquidity(): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "autoAddLiquidity",
      "autoAddLiquidity():(bool)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  autoLiquidityReceiver(): Address {
    let result = super.call(
      "autoLiquidityReceiver",
      "autoLiquidityReceiver():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_autoLiquidityReceiver(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "autoLiquidityReceiver",
      "autoLiquidityReceiver():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  autoRebase(): boolean {
    let result = super.call("autoRebase", "autoRebase():(bool)", []);

    return result[0].toBoolean();
  }

  try_autoRebase(): ethereum.CallResult<boolean> {
    let result = super.tryCall("autoRebase", "autoRebase():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  balanceOf(who: Address): BigInt {
    let result = super.call("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(who)
    ]);

    return result[0].toBigInt();
  }

  try_balanceOf(who: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(who)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  basicRebaseRate(): BigInt {
    let result = super.call(
      "basicRebaseRate",
      "basicRebaseRate():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_basicRebaseRate(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "basicRebaseRate",
      "basicRebaseRate():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  blacklist(param0: Address): boolean {
    let result = super.call("blacklist", "blacklist(address):(bool)", [
      ethereum.Value.fromAddress(param0)
    ]);

    return result[0].toBoolean();
  }

  try_blacklist(param0: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall("blacklist", "blacklist(address):(bool)", [
      ethereum.Value.fromAddress(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  burnRate(): BigInt {
    let result = super.call("burnRate", "burnRate():(uint256)", []);

    return result[0].toBigInt();
  }

  try_burnRate(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("burnRate", "burnRate():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  checkFeeExempt(_addr: Address): boolean {
    let result = super.call(
      "checkFeeExempt",
      "checkFeeExempt(address):(bool)",
      [ethereum.Value.fromAddress(_addr)]
    );

    return result[0].toBoolean();
  }

  try_checkFeeExempt(_addr: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "checkFeeExempt",
      "checkFeeExempt(address):(bool)",
      [ethereum.Value.fromAddress(_addr)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  decimals(): i32 {
    let result = super.call("decimals", "decimals():(uint8)", []);

    return result[0].toI32();
  }

  try_decimals(): ethereum.CallResult<i32> {
    let result = super.tryCall("decimals", "decimals():(uint8)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  decreaseAllowance(spender: Address, subtractedValue: BigInt): boolean {
    let result = super.call(
      "decreaseAllowance",
      "decreaseAllowance(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(spender),
        ethereum.Value.fromUnsignedBigInt(subtractedValue)
      ]
    );

    return result[0].toBoolean();
  }

  try_decreaseAllowance(
    spender: Address,
    subtractedValue: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "decreaseAllowance",
      "decreaseAllowance(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(spender),
        ethereum.Value.fromUnsignedBigInt(subtractedValue)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  feeDenominator(): BigInt {
    let result = super.call("feeDenominator", "feeDenominator():(uint256)", []);

    return result[0].toBigInt();
  }

  try_feeDenominator(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "feeDenominator",
      "feeDenominator():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getCirculatingSupply(): BigInt {
    let result = super.call(
      "getCirculatingSupply",
      "getCirculatingSupply():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_getCirculatingSupply(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getCirculatingSupply",
      "getCirculatingSupply():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getLiquidityBacking(accuracy: BigInt): BigInt {
    let result = super.call(
      "getLiquidityBacking",
      "getLiquidityBacking(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(accuracy)]
    );

    return result[0].toBigInt();
  }

  try_getLiquidityBacking(accuracy: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getLiquidityBacking",
      "getLiquidityBacking(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(accuracy)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getRebaseRate(): BigInt {
    let result = super.call("getRebaseRate", "getRebaseRate():(uint256)", []);

    return result[0].toBigInt();
  }

  try_getRebaseRate(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getRebaseRate",
      "getRebaseRate():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  increaseAllowance(spender: Address, addedValue: BigInt): boolean {
    let result = super.call(
      "increaseAllowance",
      "increaseAllowance(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(spender),
        ethereum.Value.fromUnsignedBigInt(addedValue)
      ]
    );

    return result[0].toBoolean();
  }

  try_increaseAllowance(
    spender: Address,
    addedValue: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "increaseAllowance",
      "increaseAllowance(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(spender),
        ethereum.Value.fromUnsignedBigInt(addedValue)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  initRebaseStartTime(): BigInt {
    let result = super.call(
      "initRebaseStartTime",
      "initRebaseStartTime():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_initRebaseStartTime(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "initRebaseStartTime",
      "initRebaseStartTime():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  isNotInSwap(): boolean {
    let result = super.call("isNotInSwap", "isNotInSwap():(bool)", []);

    return result[0].toBoolean();
  }

  try_isNotInSwap(): ethereum.CallResult<boolean> {
    let result = super.tryCall("isNotInSwap", "isNotInSwap():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  lastAddLiquidityTime(): BigInt {
    let result = super.call(
      "lastAddLiquidityTime",
      "lastAddLiquidityTime():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_lastAddLiquidityTime(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "lastAddLiquidityTime",
      "lastAddLiquidityTime():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  lastRebasedTime(): BigInt {
    let result = super.call(
      "lastRebasedTime",
      "lastRebasedTime():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_lastRebasedTime(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "lastRebasedTime",
      "lastRebasedTime():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  liquidityFee(): BigInt {
    let result = super.call("liquidityFee", "liquidityFee():(uint256)", []);

    return result[0].toBigInt();
  }

  try_liquidityFee(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("liquidityFee", "liquidityFee():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  name(): string {
    let result = super.call("name", "name():(string)", []);

    return result[0].toString();
  }

  try_name(): ethereum.CallResult<string> {
    let result = super.tryCall("name", "name():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  pair(): Address {
    let result = super.call("pair", "pair():(address)", []);

    return result[0].toAddress();
  }

  try_pair(): ethereum.CallResult<Address> {
    let result = super.tryCall("pair", "pair():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  router(): Address {
    let result = super.call("router", "router():(address)", []);

    return result[0].toAddress();
  }

  try_router(): ethereum.CallResult<Address> {
    let result = super.tryCall("router", "router():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  sellFee(): BigInt {
    let result = super.call("sellFee", "sellFee():(uint256)", []);

    return result[0].toBigInt();
  }

  try_sellFee(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("sellFee", "sellFee():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  stashInsuranceFundFee(): BigInt {
    let result = super.call(
      "stashInsuranceFundFee",
      "stashInsuranceFundFee():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_stashInsuranceFundFee(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "stashInsuranceFundFee",
      "stashInsuranceFundFee():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  stashInsuranceFundReceiver(): Address {
    let result = super.call(
      "stashInsuranceFundReceiver",
      "stashInsuranceFundReceiver():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_stashInsuranceFundReceiver(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "stashInsuranceFundReceiver",
      "stashInsuranceFundReceiver():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  swapEnabled(): boolean {
    let result = super.call("swapEnabled", "swapEnabled():(bool)", []);

    return result[0].toBoolean();
  }

  try_swapEnabled(): ethereum.CallResult<boolean> {
    let result = super.tryCall("swapEnabled", "swapEnabled():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  symbol(): string {
    let result = super.call("symbol", "symbol():(string)", []);

    return result[0].toString();
  }

  try_symbol(): ethereum.CallResult<string> {
    let result = super.tryCall("symbol", "symbol():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  totalFee(): BigInt {
    let result = super.call("totalFee", "totalFee():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalFee(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("totalFee", "totalFee():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalSupply(): BigInt {
    let result = super.call("totalSupply", "totalSupply():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalSupply(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("totalSupply", "totalSupply():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  transfer(to: Address, value: BigInt): boolean {
    let result = super.call("transfer", "transfer(address,uint256):(bool)", [
      ethereum.Value.fromAddress(to),
      ethereum.Value.fromUnsignedBigInt(value)
    ]);

    return result[0].toBoolean();
  }

  try_transfer(to: Address, value: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall("transfer", "transfer(address,uint256):(bool)", [
      ethereum.Value.fromAddress(to),
      ethereum.Value.fromUnsignedBigInt(value)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  transferFrom(from: Address, to: Address, value: BigInt): boolean {
    let result = super.call(
      "transferFrom",
      "transferFrom(address,address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(from),
        ethereum.Value.fromAddress(to),
        ethereum.Value.fromUnsignedBigInt(value)
      ]
    );

    return result[0].toBoolean();
  }

  try_transferFrom(
    from: Address,
    to: Address,
    value: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "transferFrom",
      "transferFrom(address,address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(from),
        ethereum.Value.fromAddress(to),
        ethereum.Value.fromUnsignedBigInt(value)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  treasuryFee(): BigInt {
    let result = super.call("treasuryFee", "treasuryFee():(uint256)", []);

    return result[0].toBigInt();
  }

  try_treasuryFee(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("treasuryFee", "treasuryFee():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  treasuryReceiver(): Address {
    let result = super.call(
      "treasuryReceiver",
      "treasuryReceiver():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_treasuryReceiver(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "treasuryReceiver",
      "treasuryReceiver():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _joeRouter(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _autoLiquidityReceiver(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _treasuryReceiver(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get _stashInsuranceFundReceiver(): Address {
    return this._call.inputValues[3].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ApproveCall extends ethereum.Call {
  get inputs(): ApproveCall__Inputs {
    return new ApproveCall__Inputs(this);
  }

  get outputs(): ApproveCall__Outputs {
    return new ApproveCall__Outputs(this);
  }
}

export class ApproveCall__Inputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get spender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get value(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ApproveCall__Outputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class DecreaseAllowanceCall extends ethereum.Call {
  get inputs(): DecreaseAllowanceCall__Inputs {
    return new DecreaseAllowanceCall__Inputs(this);
  }

  get outputs(): DecreaseAllowanceCall__Outputs {
    return new DecreaseAllowanceCall__Outputs(this);
  }
}

export class DecreaseAllowanceCall__Inputs {
  _call: DecreaseAllowanceCall;

  constructor(call: DecreaseAllowanceCall) {
    this._call = call;
  }

  get spender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get subtractedValue(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class DecreaseAllowanceCall__Outputs {
  _call: DecreaseAllowanceCall;

  constructor(call: DecreaseAllowanceCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class IncreaseAllowanceCall extends ethereum.Call {
  get inputs(): IncreaseAllowanceCall__Inputs {
    return new IncreaseAllowanceCall__Inputs(this);
  }

  get outputs(): IncreaseAllowanceCall__Outputs {
    return new IncreaseAllowanceCall__Outputs(this);
  }
}

export class IncreaseAllowanceCall__Inputs {
  _call: IncreaseAllowanceCall;

  constructor(call: IncreaseAllowanceCall) {
    this._call = call;
  }

  get spender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get addedValue(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class IncreaseAllowanceCall__Outputs {
  _call: IncreaseAllowanceCall;

  constructor(call: IncreaseAllowanceCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class ManualSyncCall extends ethereum.Call {
  get inputs(): ManualSyncCall__Inputs {
    return new ManualSyncCall__Inputs(this);
  }

  get outputs(): ManualSyncCall__Outputs {
    return new ManualSyncCall__Outputs(this);
  }
}

export class ManualSyncCall__Inputs {
  _call: ManualSyncCall;

  constructor(call: ManualSyncCall) {
    this._call = call;
  }
}

export class ManualSyncCall__Outputs {
  _call: ManualSyncCall;

  constructor(call: ManualSyncCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RescueCall extends ethereum.Call {
  get inputs(): RescueCall__Inputs {
    return new RescueCall__Inputs(this);
  }

  get outputs(): RescueCall__Outputs {
    return new RescueCall__Outputs(this);
  }
}

export class RescueCall__Inputs {
  _call: RescueCall;

  constructor(call: RescueCall) {
    this._call = call;
  }
}

export class RescueCall__Outputs {
  _call: RescueCall;

  constructor(call: RescueCall) {
    this._call = call;
  }
}

export class RescueTokenCall extends ethereum.Call {
  get inputs(): RescueTokenCall__Inputs {
    return new RescueTokenCall__Inputs(this);
  }

  get outputs(): RescueTokenCall__Outputs {
    return new RescueTokenCall__Outputs(this);
  }
}

export class RescueTokenCall__Inputs {
  _call: RescueTokenCall;

  constructor(call: RescueTokenCall) {
    this._call = call;
  }

  get tokenAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class RescueTokenCall__Outputs {
  _call: RescueTokenCall;

  constructor(call: RescueTokenCall) {
    this._call = call;
  }
}

export class SetAutoAddLiquidityCall extends ethereum.Call {
  get inputs(): SetAutoAddLiquidityCall__Inputs {
    return new SetAutoAddLiquidityCall__Inputs(this);
  }

  get outputs(): SetAutoAddLiquidityCall__Outputs {
    return new SetAutoAddLiquidityCall__Outputs(this);
  }
}

export class SetAutoAddLiquidityCall__Inputs {
  _call: SetAutoAddLiquidityCall;

  constructor(call: SetAutoAddLiquidityCall) {
    this._call = call;
  }

  get _flag(): boolean {
    return this._call.inputValues[0].value.toBoolean();
  }
}

export class SetAutoAddLiquidityCall__Outputs {
  _call: SetAutoAddLiquidityCall;

  constructor(call: SetAutoAddLiquidityCall) {
    this._call = call;
  }
}

export class SetAutoRebaseCall extends ethereum.Call {
  get inputs(): SetAutoRebaseCall__Inputs {
    return new SetAutoRebaseCall__Inputs(this);
  }

  get outputs(): SetAutoRebaseCall__Outputs {
    return new SetAutoRebaseCall__Outputs(this);
  }
}

export class SetAutoRebaseCall__Inputs {
  _call: SetAutoRebaseCall;

  constructor(call: SetAutoRebaseCall) {
    this._call = call;
  }

  get _flag(): boolean {
    return this._call.inputValues[0].value.toBoolean();
  }
}

export class SetAutoRebaseCall__Outputs {
  _call: SetAutoRebaseCall;

  constructor(call: SetAutoRebaseCall) {
    this._call = call;
  }
}

export class SetBasicRebaseRateCall extends ethereum.Call {
  get inputs(): SetBasicRebaseRateCall__Inputs {
    return new SetBasicRebaseRateCall__Inputs(this);
  }

  get outputs(): SetBasicRebaseRateCall__Outputs {
    return new SetBasicRebaseRateCall__Outputs(this);
  }
}

export class SetBasicRebaseRateCall__Inputs {
  _call: SetBasicRebaseRateCall;

  constructor(call: SetBasicRebaseRateCall) {
    this._call = call;
  }

  get value(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetBasicRebaseRateCall__Outputs {
  _call: SetBasicRebaseRateCall;

  constructor(call: SetBasicRebaseRateCall) {
    this._call = call;
  }
}

export class SetBotBlacklistCall extends ethereum.Call {
  get inputs(): SetBotBlacklistCall__Inputs {
    return new SetBotBlacklistCall__Inputs(this);
  }

  get outputs(): SetBotBlacklistCall__Outputs {
    return new SetBotBlacklistCall__Outputs(this);
  }
}

export class SetBotBlacklistCall__Inputs {
  _call: SetBotBlacklistCall;

  constructor(call: SetBotBlacklistCall) {
    this._call = call;
  }

  get _botAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _flag(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class SetBotBlacklistCall__Outputs {
  _call: SetBotBlacklistCall;

  constructor(call: SetBotBlacklistCall) {
    this._call = call;
  }
}

export class SetFeeReceiversCall extends ethereum.Call {
  get inputs(): SetFeeReceiversCall__Inputs {
    return new SetFeeReceiversCall__Inputs(this);
  }

  get outputs(): SetFeeReceiversCall__Outputs {
    return new SetFeeReceiversCall__Outputs(this);
  }
}

export class SetFeeReceiversCall__Inputs {
  _call: SetFeeReceiversCall;

  constructor(call: SetFeeReceiversCall) {
    this._call = call;
  }

  get _autoLiquidityReceiver(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _treasuryReceiver(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _stashInsuranceFundReceiver(): Address {
    return this._call.inputValues[2].value.toAddress();
  }
}

export class SetFeeReceiversCall__Outputs {
  _call: SetFeeReceiversCall;

  constructor(call: SetFeeReceiversCall) {
    this._call = call;
  }
}

export class SetFeesCall extends ethereum.Call {
  get inputs(): SetFeesCall__Inputs {
    return new SetFeesCall__Inputs(this);
  }

  get outputs(): SetFeesCall__Outputs {
    return new SetFeesCall__Outputs(this);
  }
}

export class SetFeesCall__Inputs {
  _call: SetFeesCall;

  constructor(call: SetFeesCall) {
    this._call = call;
  }

  get _liquidityFee(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _treasuryFee(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _stashInsuranceFundFee(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _sellFee(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get _burnRate(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get _feeDenominator(): BigInt {
    return this._call.inputValues[5].value.toBigInt();
  }
}

export class SetFeesCall__Outputs {
  _call: SetFeesCall;

  constructor(call: SetFeesCall) {
    this._call = call;
  }
}

export class SetLPCall extends ethereum.Call {
  get inputs(): SetLPCall__Inputs {
    return new SetLPCall__Inputs(this);
  }

  get outputs(): SetLPCall__Outputs {
    return new SetLPCall__Outputs(this);
  }
}

export class SetLPCall__Inputs {
  _call: SetLPCall;

  constructor(call: SetLPCall) {
    this._call = call;
  }

  get _address(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetLPCall__Outputs {
  _call: SetLPCall;

  constructor(call: SetLPCall) {
    this._call = call;
  }
}

export class SetWhitelistCall extends ethereum.Call {
  get inputs(): SetWhitelistCall__Inputs {
    return new SetWhitelistCall__Inputs(this);
  }

  get outputs(): SetWhitelistCall__Outputs {
    return new SetWhitelistCall__Outputs(this);
  }
}

export class SetWhitelistCall__Inputs {
  _call: SetWhitelistCall;

  constructor(call: SetWhitelistCall) {
    this._call = call;
  }

  get _addr(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetWhitelistCall__Outputs {
  _call: SetWhitelistCall;

  constructor(call: SetWhitelistCall) {
    this._call = call;
  }
}

export class TransferCall extends ethereum.Call {
  get inputs(): TransferCall__Inputs {
    return new TransferCall__Inputs(this);
  }

  get outputs(): TransferCall__Outputs {
    return new TransferCall__Outputs(this);
  }
}

export class TransferCall__Inputs {
  _call: TransferCall;

  constructor(call: TransferCall) {
    this._call = call;
  }

  get to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get value(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class TransferCall__Outputs {
  _call: TransferCall;

  constructor(call: TransferCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class TransferFromCall extends ethereum.Call {
  get inputs(): TransferFromCall__Inputs {
    return new TransferFromCall__Inputs(this);
  }

  get outputs(): TransferFromCall__Outputs {
    return new TransferFromCall__Outputs(this);
  }
}

export class TransferFromCall__Inputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get value(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class TransferFromCall__Outputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class WithdrawAllToTreasuryCall extends ethereum.Call {
  get inputs(): WithdrawAllToTreasuryCall__Inputs {
    return new WithdrawAllToTreasuryCall__Inputs(this);
  }

  get outputs(): WithdrawAllToTreasuryCall__Outputs {
    return new WithdrawAllToTreasuryCall__Outputs(this);
  }
}

export class WithdrawAllToTreasuryCall__Inputs {
  _call: WithdrawAllToTreasuryCall;

  constructor(call: WithdrawAllToTreasuryCall) {
    this._call = call;
  }
}

export class WithdrawAllToTreasuryCall__Outputs {
  _call: WithdrawAllToTreasuryCall;

  constructor(call: WithdrawAllToTreasuryCall) {
    this._call = call;
  }
}
